---
const { id } = Astro.params;
import Layout from "../../layouts/Layout.astro";
import { urlBase } from "../../lib/utils/constants.js";

export const prerender = false;

let hero;
let error;
let isLoading = true;

console.log("Fetching hero with ID:", id);

try {
  if (id) {
    const response = await fetch(
      `https://akabab.github.io/superhero-api/api//id/${id}.json`,
      {
        headers: {
          "Cache-Control": "max-age=3600", // Cache for 1 hour
        },
      }
    );
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    hero = await response.json();
    console.log("Hero data fetched successfully");
  } else {
    throw new Error("No ID provided");
  }
} catch (e) {
  console.error("Error fetching hero data:", e);
  error = e.message;
} finally {
  isLoading = false;
}

if (error) {
  return new Response(`Error: ${error}`, {
    status: 500,
    statusText: "Internal Server Error",
  });
}
---

<Layout title="SuperHero API">
  {
    isLoading ? (
      <div class="loading">Loading...</div>
    ) : error ? (
      <div class="error-message">
        <p>Error: {error}</p>
        <a href={urlBase}>Return to home</a>
      </div>
    ) : (
      <article>
        <div class="mt-5 ml-5 mb-5">
          <a href={urlBase} class="flex text-white font-semibold pt-5">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-6 w-6 inline-block mr-2"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M10 19l-7-7m0 0l7-7m-7 7h18"
              />
            </svg>
            Volver
          </a>
        </div>
        {hero && (
          <div class="w-full rounded-lg shadow-lg overflow-hidden max-w-[1000px] mx-auto">
            <div class="relative max-w-[1000px] mx-auto">
              <img
                src={hero.images.lg}
                alt={hero.name}
                class="w-full h-full max-h-[500px] object-cover rounded-3xl cursor-pointer"
                id="heroImage_page"
              />
              <div class="absolute bottom-4 left-4">
                <h1 class="text-4xl font-bold">{hero.name}</h1>
              </div>
            </div>
            <div class="p-6">
              <h2 class="text-2xl font-semibold mb-4">Estadisticas</h2>
              <div class="grid grid-cols-3 gap-4">
                {hero.powerstats &&
                  Object.entries(hero.powerstats).map(([stat, value]) => (
                    <div class="flex flex-col items-center">
                      <div class="text-yellow-400 text-3xl font-bold">
                        {value}
                      </div>
                      <div class="text-gray-400 uppercase">{stat}</div>
                    </div>
                  ))}
              </div>
            </div>
            <div class="p-6">
              <h2 class="text-2xl font-semibold mb-4">APARIENCIA</h2>
              <div class="bg-gray-800 p-4 rounded-lg mb-6">
                {hero.appearance &&
                  Object.entries(hero.appearance).map(([key, value]) => (
                    <div class="mb-4 flex flex-row gap-4">
                      <h3 class="text-lg font-semibold uppercase">{key}</h3>
                      <p>{Array.isArray(value) ? value.join(", ") : value}</p>
                    </div>
                  ))}
              </div>

              <h2 class="text-2xl font-semibold mb-4">BIOGRAFIA</h2>
              <div class="bg-gray-800 p-4 rounded-lg mb-6">
                {hero.biography &&
                  Object.entries(hero.biography).map(([key, value]) => (
                    <div class="mb-4 flex flex-row gap-4">
                      <h3 class="text-lg font-semibold uppercase">{key}</h3>
                      <p>{Array.isArray(value) ? value.join(", ") : value}</p>
                    </div>
                  ))}
              </div>

              <h2 class="text-2xl font-semibold mb-4">TRABAJO</h2>
              <div class="bg-gray-800 p-4 rounded-lg mb-6">
                {hero.work &&
                  Object.entries(hero.work).map(([key, value]) => (
                    <div class="mb-4 flex flex-row gap-4">
                      <h3 class="text-lg font-semibold uppercase">{key}</h3>
                      <p>{value}</p>
                    </div>
                  ))}
              </div>

              <h2 class="text-2xl font-semibold mb-4">CONEXIONES</h2>
              <div class="bg-gray-800 p-4 rounded-lg mb-6">
                {hero.connections &&
                  Object.entries(hero.connections).map(([key, value]) => (
                    <div class="mb-4 flex flex-row gap-4">
                      <h3 class="text-lg font-semibold uppercase">{key}</h3>
                      <p>{value}</p>
                    </div>
                  ))}
              </div>
            </div>
          </div>
        )}
        <div
          id="imageModal"
          class="modal hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center"
        >
          <div class="modal-content relative max-w-2xl">
            <img id="modalImage" src="" alt="Superhero full image" />
            <button
              id="closeModal"
              class="absolute top-4 right-4 text-white text-2xl"
            >
              &times;
            </button>
          </div>
        </div>
      </article>
    )
  }
</Layout>

<style>
  .modal {
    transition: opacity 0.3s ease;
  }
  .modal-content {
    transition: transform 0.3s ease;
  }
  .modal.hidden {
    opacity: 0;
    pointer-events: none;
  }
  .modal.hidden .modal-content {
    transform: scale(0.9);
  }
  .loading {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    font-size: 1.5rem;
    color: white;
  }
  .error-message {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 100vh;
    font-size: 1.5rem;
    color: white;
  }
  .error-message a {
    margin-top: 1rem;
    color: #3498db;
    text-decoration: underline;
  }
</style>
